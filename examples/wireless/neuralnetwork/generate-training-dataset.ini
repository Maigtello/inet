[General]
network = GenerateNeuralNetworkErrorModelTrainingDataset
repeat = 8

**.param-recording = false
**.scalar-recording = false
**.bin-recording = false
**.vector-recording = false
**.statistic-recording = false

# mobility
*.radio.antenna.mobility.typename = "StationaryMobility"
*.radio.antenna.mobility.initialX = 0m
*.radio.antenna.mobility.initialY = 0m
*.radio.antenna.mobility.initialZ = 0m
*.radio.antenna.mobilityModule = "mobility"

# training dataset generator
*.trainingDatasetGenerator.radioModule = "^.radio"
*.trainingDatasetGenerator.repeatCount = 100

[Config ApskRadio]
description = "Generates neural network training data for the error model of ApskRadio"

# training dataset generator
*.trainingDatasetGenerator.filenameFormat = "results/%c_%r_%m_%f_%b_" + string(${repetition}) + ".log"
*.trainingDatasetGenerator.packetCount = 10000
*.trainingDatasetGenerator.packetLength = 64B
*.trainingDatasetGenerator.backgroundNoisePowerMean = uniform(100uW, 2mW)
*.trainingDatasetGenerator.backgroundNoisePowerStddev = uniform(100uW, 1mW)

# radio medium
*.radioMedium.typename = "ApskLayeredDimensionalRadioMedium"

# radio
*.radio.typename = "ApskLayeredDimensionalRadio"
*.radio.centerFrequency = 2.4GHz
*.radio.bandwidth = 20MHz
*.radio.receiver.sensitivity = -109dBm
*.radio.receiver.energyDetection = -90dBm
*.radio.receiver.snirThreshold = -inf dB

# transmitter
*.radio.transmitter.bitrate = 36Mbps
*.radio.transmitter.power = 10mW
*.radio.transmitter.levelOfDetail = "symbol"
*.radio.transmitter.modulator.modulation = "BPSK"
*.radio.transmitter.encoder.fecEncoder.typename = "ConvolutionalCoder"
*.radio.transmitter.encoder.fecEncoder.transferFunctionMatrix = "1 3"
*.radio.transmitter.encoder.fecEncoder.constraintLengthVector = "2"
*.radio.transmitter.encoder.fecEncoder.puncturingMatrix = "1; 1"
*.radio.transmitter.encoder.fecEncoder.punctureK = 1
*.radio.transmitter.encoder.fecEncoder.punctureN = 2

# receiver
*.radio.receiver.levelOfDetail = "symbol"
*.radio.receiver.demodulator.modulation = "BPSK"
*.radio.receiver.decoder.fecDecoder.typename = "ConvolutionalCoder"
*.radio.receiver.decoder.fecDecoder.transferFunctionMatrix = "1 3"
*.radio.receiver.decoder.fecDecoder.constraintLengthVector = "2"
*.radio.receiver.decoder.fecDecoder.puncturingMatrix = "1; 1"
*.radio.receiver.decoder.fecDecoder.punctureK = 1
*.radio.receiver.decoder.fecDecoder.punctureN = 2

[Config Ieee80211Radio]
description = "Generates neural network training data for the error model of Ieee80211Radio"

*.trainingDatasetGenerator.filenameFormat = "results/%c_%r_%m_%M_%f_%b_" + string(${repetition}) + ".log"
*.trainingDatasetGenerator.packetCount = 1000
*.trainingDatasetGenerator.packetLength = 76B
*.trainingDatasetGenerator.backgroundNoisePowerMean = uniform(1uW, 5uW)
*.trainingDatasetGenerator.backgroundNoisePowerStddev = uniform(1uW, 5uW)
*.trainingDatasetGenerator.numInterferingSignals = intuniform(1, 10)
*.trainingDatasetGenerator.interferingSignalNoisePowerMean = uniform(1uW, 25uW)
*.trainingDatasetGenerator.interferingSignalNoisePowerStddev = uniform(1uW, 25uW)

# radio medium
*.radioMedium.typename = "Ieee80211LayeredDimensionalRadioMedium"

# radio
*.radio.typename = "Ieee80211OfdmRadio"
*.radio.centerFrequency = 2.412GHz
*.radio.bandwidth = 20MHz

# transmitter
*.radio.transmitter.typename = "Ieee80211LayeredOfdmTransmitter"
*.radio.transmitter.levelOfDetail = "symbol"
*.radio.transmitter.power = 10mW

# receiver
*.radio.receiver.typename = "Ieee80211LayeredOfdmReceiver"
*.radio.receiver.levelOfDetail = "symbol"
*.radio.receiver.sensitivity = -109dBm
*.radio.receiver.energyDetection = -90dBm
*.radio.receiver.snirThreshold = -inf dB
*.radio.receiver.channelSpacing = 20MHz
*.radio.receiver.errorModel.typename = "Ieee80211OfdmErrorModel"
